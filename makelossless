#!/bin/bash
# makelossless

VERSION="1.0"
SCRIPTDIR=$(dirname $(which "${0}"))
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};
DEPENDENCIES=(ffmpeg ffprobe mediainfo)
FFV1_VERSION_EXPECTED=3.4
_initialize_make

_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "This application will losslessly transcode a video file or package input with the following options."
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename ${0}) fileorpackage1 [ fileorpackage2 ...]"
    echo "  -j (use lossless jpeg2000 instead of ffv1 version 3)"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -h display this help"
    echo
    exit
}
[ "${#}" = 0 ] && _usage

_get_ffv1_version(){
    FFV1_VERSION=$(ffmpeg -debug 1 -i "${1}" -vframes 1 -f null - 2>&1 | grep -m 1 "^\[ffv1" | grep -o "ver:[0-9.]*" | cut -d":" -f2)
}

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":jnh" OPT ; do
    case "${OPT}" in
        j) JPEG2000MODE="Y";;
        n) DRYRUN=true;;
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; _writeerrorlog "makelossless" "The option selected required an argument and none was provided. The script had to exit." ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "${*}" != "" ] ; do
    # get context about the input
    INPUT="${1}"
    [ -d "${INPUT}" ] && LOGDIR="${INPUT}/metadata/logs"
    [ -f "${INPUT}" ] && LOGDIR="$(dirname "${INPUT}")/lossless/logs"
    [ ! "${LOGDIR}" ] && LOGDIR="${INPUT}/metadata/logs"
    
    INPUTFILES=$(_maketemp)

    if [ -f "${INPUT}" ] ; then
        streamcount=$(ffprobe -loglevel quiet "$file" -show_entries format=nb_streams -of default=nw=1:nk=1)
        duration_ts=$(ffprobe -loglevel quiet "$file" -show_entries stream=duration_ts -of default=nw=1:nk=1)
        if [[ "$streamcount" > 0  && "${duration_ts}" != 1 ]] ; then
            _report -d "Input file: $file"
            echo "$file" >> "${INPUTFILES}"
        fi
    elif [ -d "${INPUT}" ] ; then
        # find av files in a directory and output to a temp list
        find "${1}/objects" -type f -size +0 "${OBJECTS_FIND_EXCLUSIONS[@]}" | while read file ; do
            streamcount=$(ffprobe -loglevel quiet "$file" -show_entries format=nb_streams -of default=nw=1:nk=1)
            duration_ts=$(ffprobe -loglevel quiet "$file" -show_entries stream=duration_ts -of default=nw=1:nk=1)
            if [[ "$streamcount" > 0  && "${duration_ts}" != 1 ]] ; then
                _report -d "Input file: $file"
                echo "$file" >> "${INPUTFILES}"
            fi
        done
    else
        _report -wt "Error: ${INPUT} is not a file or directory"
        exit 1
    fi
    INPUTFILECOUNT=$(wc -l "${INPUTFILES}" | awk '{print $1}')
    if [[ "${INPUTFILECOUNT}" = 0 ]] ; then
        _report -w "Error no audiovisual input files were found."
        exit 1
    fi
    while read SOURCEFILE ; do
        OUTPUTDIR=$(dirname "${SOURCEFILE}")
        SOURCEFILENAME=$(basename "${SOURCEFILE}")

        _log -b

        # clear local arrays
        _unset_variables

        # encoding options
        _get_codectagstring "${SOURCEFILE}"
        _get_videostreamcount "${SOURCEFILE}"
        _get_audiostreamcount "${SOURCEFILE}"
        INPUTOPTIONS+=(-nostdin)
        INPUTOPTIONS+=(-vsync 0)
        if [[ "${VIDEOSTREAMCOUNT}" > 0 ]] ; then
            if [[ "${CODEC_TAG_STRING}" == "mjp2" ]] ; then
                 INPUTOPTIONS+=(-vcodec libopenjpeg)
            fi
            MIDDLEOPTIONS+=(-map 0:v)
            MIDDLEOPTIONS+=(-map 0:a)
            if [[ "${JPEG2000MODE}" == "Y" ]] ; then
                MIDDLEOPTIONS+=(-c:v libopenjpeg)
                INPUTOPTIONSFRAMEMD5+=(-vcodec libopenjpeg)
                SUFFIX="_j2k"
            else
                MIDDLEOPTIONS+=(-c:v ffv1)
                MIDDLEOPTIONS+=(-level 3)
                MIDDLEOPTIONS+=(-g 1)
                SUFFIX="_ffv1"
            fi
            _add_video_filter "setfield=bff" # this is a presumption but much of the uncompressed input is bff but not probably labelled
        fi
        if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
            MIDDLEOPTIONS+=(-c:a copy)
        fi
        _get_codectagstring "${SOURCEFILE}"
        if [[ "${CODEC_TAG_STRING}" == "FFV1" ]] ; then
            _get_ffv1_version "${SOURCEFILE}"
            echo "hey $FFV1_VERSION in ${SOURCEFILE}"
            
        fi
        exit
        if [[ "${CODEC_TAG_STRING}" == "2vuy" || \
              "${CODEC_TAG_STRING}" == "v210" || \
             ("${CODEC_TAG_STRING}" == "FFV1" && $(echo "${FFV1_VERSION} -lt ${FFV1_VERSION_EXPECTED}" | bc)) ]] ; then
            _report -dt "${SOURCEFILENAME} is ${CODEC_TAG_STRING}, starting encode"
            _run mkdir -p "${OUTPUTDIR}" "${LOGDIR}"
            _prep_ffmpeg_log

            _filter_to_middle_option
            if [[ -f "${LOGDIR}/${SOURCEFILENAME%.*}.framemd5" ]] ; then
                _report -dt "Creating a framemd5 report for ${SOURCEFILENAME}."
                _run_critical ffmpeg ${INPUTOPTIONS[@]} -i "${SOURCEFILE}"  ${MIDDLEOPTIONS[@]} "${OUTPUTDIR}/${SOURCEFILENAME%.*}${SUFFIX}.mkv" -f framemd5 -an "${LOGDIR}/${SOURCEFILENAME%.*}.framemd5"
            else
                _report -dt "A framemd5 report for ${SOURCEFILENAME} already exists, verifying that first."
                _run_critical ffmpeg ${INPUTOPTIONS[@]} -i "${SOURCEFILE}" -f framemd5 -an "${LOGDIR}/${SOURCEFILENAME}_$(_get_iso8601_c).framemd5"
                
            fi
            if [ "${CODEC_TAG_STRING}" == "2vuy" ] ; then
                _run_critical ffmpeg ${INPUTOPTIONS[@]} -i "${OUTPUTDIR}/${SOURCEFILENAME%.*}${SUFFIX}.mkv" -f framemd5 -pix_fmt uyvy422 -an "${LOGDIR}/${SOURCEFILENAME%.*}${SUFFIX}.framemd5"
            else
                _run_critical ffmpeg ${INPUTOPTIONS[@]} ${INPUTOPTIONSFRAMEMD5[@]} -i "${OUTPUTDIR}/${SOURCEFILENAME%.*}${SUFFIX}.mkv" -f framemd5 -an "${LOGDIR}/${SOURCEFILENAME%.*}${SUFFIX}.framemd5"
            fi
            if [ $(grep -v "^#" "${LOGDIR}/${SOURCEFILENAME%.*}.framemd5" | md5 -q) = $(grep -v "^#" "${LOGDIR}/${SOURCEFILENAME%.*}${SUFFIX}.framemd5" | md5 -q) ] ; then
                _report -dt "Everything looks safe. Going to delete the original."
                _run_critical mediainfo -f --language=raw --output=XML "${SOURCEFILE}" > "${LOGDIR}/${SOURCEFILENAME%.*}_mediainfo.xml"
                #_run_critical rm -f -v "${SOURCEFILE}"
            else
                _report -wt "Not looking safe. Going to keep the original."
            fi
        else
            _report -wt "${SOURCEFILENAME} is not 2vuy or v210 or progressive ffv1, skipping"
            _writeerrorlog "makelossless" "The source file is not 2vuy or v210 or progressive ffv1, so makelossless was unable to run."
            continue
        fi
        _report -dt done with "${SOURCEFILE}"
    done < "${INPUTFILES}"
    shift
    _log -e
done
